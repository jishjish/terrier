digraph {
    0 [ label = "\"custom_metadata.py::def to_bytes(value: Any)\"" ]
    1 [ label = "\"placeholder.py\"" ]
    2 [ label = "\"custom_metadata.py\"" ]
    3 [ label = "\"tensor.py::def _load_config()\"" ]
    4 [ label = "\"classifier.py\"" ]
    5 [ label = "\"ops.py\"" ]
    6 [ label = "\"tensor.py\"" ]
    7 [ label = "\"custom_metadata.py::def write_parquet_meta(self)\"" ]
    8 [ label = "\"classifier.py::def _load_config()\"" ]
    9 [ label = "\"custom_metadata.py::def convert_metadata_to_bytes(self, metadata: Dict[str, Any])\"" ]
    10 [ label = "\"placeholder.py::def write_parquet_meta(self)\"" ]
    11 [ label = "\"missing_data.py::def get_intervals(missing)\"" ]
    12 [ label = "\"missing_data.py\"" ]
    13 [ label = "\"merge_transfers_logs.py::def merge_erc20_transfers_and_logs(transfers_df: pl.DataFrame, logs_df: pl.DataFrame)\"" ]
    14 [ label = "\"merge_transfers_logs.py\"" ]
    15 [ label = "\"match_token_metadata.py::def get_erc20_metadata()\"" ]
    16 [ label = "\"match_token_metadata.py\"" ]
    17 [ label = "\"placeholder.py::def read_w_meta(where)\"" ]
    18 [ label = "\"placeholder.py::def _event_type_counts(self)\"" ]
    19 [ label = "\"missing_data.py::def get_missing_erc20_ranges()\"" ]
    20 [ label = "\"placeholder.py::def read_w_meta(self)\"" ]
    21 [ label = "\"placeholder.py::def to_bytes(value: Any)\"" ]
    22 [ label = "\"ops.py::def _load_config()\"" ]
    23 [ label = "\"address_type_check.py::def is_contract_address(address: str | list[str])\"" ]
    24 [ label = "\"address_type_check.py\"" ]
    25 [ label = "\"ops.py::def log_ranges(self)\"" ]
    26 [ label = "\"ops.py::def transfer_ranges(self)\"" ]
    27 [ label = "\"match_exchange.py::def get_known_classifiers_json()\"" ]
    28 [ label = "\"match_exchange.py\"" ]
    29 [ label = "\"parquet_info.py::def evm_parquet_info(files: Path | list[Path])\"" ]
    30 [ label = "\"parquet_info.py\"" ]
    31 [ label = "\"placeholder.py::def convert_metadata_to_bytes(self, metadata: Dict[str, Any])\"" ]
    32 [ label = "\"custom_metadata.py::def _event_type_counts(self)\"" ]
    33 [ label = "\"ops.py::def possible_range_dict(self)\"" ]
    34 [ label = "\"merge_transfers_logs.py::def decode_address(hex_string: str)\"" ]
    35 [ label = "\"parquet_info.py::def meta_parquet_info(files: Path | list[Path])\"" ]
    36 [ label = "\"ops.py::def extract_range(self, filename: str)\"" ]
    37 [ label = "\"s3_client.py::def connect_s3()\"" ]
    38 [ label = "\"s3_client.py\"" ]
    39 [ label = "\"placeholder.py::def add_metadata(self, key: str, value: Any)\"" ]
    40 [ label = "\"push_to_s3.py::def upload_file_s3(file_name, bucket, object_name=None)\"" ]
    41 [ label = "\"push_to_s3.py\"" ]
    42 [ label = "\"binary_converter.py::def auto_hex_encode_columns(df)\"" ]
    43 [ label = "\"binary_converter.py\"" ]
    44 [ label = "\"match_exchange.py::def get_maps()\"" ]
    45 [ label = "\"data.py::def _load_config()\"" ]
    46 [ label = "\"erc20_metadata.py::def update_metadata_parquet(reference_addresses: List[str])\"" ]
    47 [ label = "\"erc20_metadata.py\"" ]
    48 [ label = "\"placeholder.py::def write_parquet_meta(df: pl.DataFrame, output_file_path: str, meta: dict)\"" ]
    0 -> 1 [ ]
    0 -> 2 [ ]
    3 -> 4 [ ]
    3 -> 5 [ ]
    3 -> 6 [ ]
    7 -> 2 [ ]
    8 -> 4 [ ]
    8 -> 5 [ ]
    8 -> 6 [ ]
    9 -> 1 [ ]
    9 -> 2 [ ]
    10 -> 2 [ ]
    11 -> 12 [ ]
    13 -> 14 [ ]
    15 -> 16 [ ]
    17 -> 1 [ ]
    17 -> 1 [ ]
    17 -> 1 [ ]
    18 -> 1 [ ]
    18 -> 1 [ ]
    19 -> 12 [ ]
    20 -> 1 [ ]
    21 -> 1 [ ]
    21 -> 2 [ ]
    22 -> 4 [ ]
    22 -> 5 [ ]
    22 -> 6 [ ]
    23 -> 24 [ ]
    25 -> 5 [ ]
    26 -> 5 [ ]
    27 -> 28 [ ]
    29 -> 30 [ ]
    31 -> 1 [ ]
    31 -> 2 [ ]
    32 -> 1 [ ]
    33 -> 5 [ ]
    34 -> 14 [ ]
    35 -> 30 [ ]
    36 -> 5 [ ]
    37 -> 38 [ ]
    39 -> 1 [ ]
    40 -> 41 [ ]
    42 -> 43 [ ]
    44 -> 28 [ ]
    45 -> 4 [ ]
    45 -> 5 [ ]
    45 -> 6 [ ]
    46 -> 47 [ ]
    48 -> 1 [ ]
    48 -> 1 [ ]
}
